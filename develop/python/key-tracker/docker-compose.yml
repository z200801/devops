---
services:
  db:
    image: postgres:15-alpine
    restart: always
    cap_drop: [ALL]
    cap_add: [CHOWN, SETUID, SETGID, DAC_OVERRIDE, FOWNER]
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev
      - /run:noexec,nosuid,nodev
      - /run/postgresql:noexec
    expose: ["5432"]
    environment:
      - POSTGRES_DB=db_keys
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=dbrootpassword
      - PGPASSWORD=dbrootpassword
      - PGUSER=postgres
    volumes:
      - db_postgres_data:/var/lib/postgresql/data
      - ./db_init/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - db-tier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 2s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '96M'
        reservations:
          cpus: '0.2'
          memory: '64M'
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    cap_drop: [ALL]
    cap_add: [CHOWN, SETGID, SETUID]
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev
      - /run:noexec,nosuid,nodev
    expose: ['8000']
    # volumes: [./backend:/app]
    depends_on:
      db: 
        condition: service_healthy
        restart: true
    env_file:
      - ./backend/.env
    environment: 
      - PYTHONUNBUFFERED=1
    networks:
      - back-tier
      - db-tier
    healthcheck:
      test: [CMD, curl, -f, http://localhost:8000/]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 96M
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost/api
    restart: unless-stopped
    cap_drop: [ALL]
    cap_add: [NET_BIND_SERVICE, CHOWN, SETGID, SETUID]
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev
      - /run:noexec,nosuid,nodev
      - /var/cache/nginx:noexec
    ports: [127.0.0.1:18180:80]
    environment:
      - REACT_APP_API_URL=/api
    depends_on:
      backend: 
        condition: service_started
        restart: true
    networks:
      - front-tier
      - back-tier
    configs:
      - source: nginx_conf
        target: /etc/nginx/conf.d/default.conf:ro
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 12M
        reservations:
          cpus: '0.1'
          memory: 8M
volumes:
  db_postgres_data:
networks:
  front-tier:
    driver: bridge
    enable_ipv6: false
  back-tier:
    driver: bridge
    enable_ipv6: false
  db-tier:
    driver: bridge
    enable_ipv6: false
configs:
  nginx_conf:
    file: frontend/nginx.conf

